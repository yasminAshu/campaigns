{"version":3,"sources":["component/Header.js","component/NavBar.js","Fixers/campaignsData.js","component/Popup.js","component/ChampaignResult.js","component/Campaigns.js","actions/action.js","App.js","serviceWorker.js","reducers/reducer.js","reducers/rootReducer.js","store.js","index.js"],"names":["Header","className","alt","NavBar","filtercampaigns","useState","active","setActive","handleClick","value","onClick","campaignsData","Popup","campaignInfo","handleClose","showHideClassName","show","src","price","ChampaignResult","campaigns","setModel","setcampaignInfo","map","item","index","current","Date","now","CretedOn","createdOn","Difference_In_Time","key","toString","parseInt","name","campaign","Campaigns","props","getCampaigns","state","this","React","Component","connect","reducer","dispatch","campiagns","Current","getTime","type","payload","data","filter","App","Boolean","window","location","hostname","match","initialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed2e3671.chunk.js","sourcesContent":["import React from 'react';\r\n/**\r\n   * \r\n   *@discription - This function will render the jsx of the Header\r\n   @param campaigns - Value of campaign\r\n   */\r\nconst Header = () => {\r\n  return (\r\n\r\n    <header className=\"header\">\r\n      <img alt=\"Blue stack\" />\r\n    </header>\r\n\r\n  )\r\n};\r\n\r\nexport default Header;","import React, { useState } from 'react';\r\n\r\n   /**\r\n   * \r\n   *@discription - This function will render the jsx of Navigation bar\r\n   @param filtercampaigns - Value of campaign\r\n   */\r\n\r\nconst NavBar = ({ filtercampaigns }) => {\r\n    const [active, setActive] = useState(\"upcoming\")\r\n    \r\n    /**\r\n   * \r\n   *@discription - This function will handle the click of the navigation bar\r\n   @param filtercampaigns - Value of campaign\r\n   */\r\n    function handleClick(value) {\r\n        filtercampaigns(value)\r\n        setActive(value)\r\n    }\r\n    return (\r\n        <nav className=\"navbar\">\r\n            <ul className=\"champaigns-navbar\">\r\n                <li onClick={() => handleClick(\"upcoming\")} className={`${active === 'upcoming' ? 'active' : ''}`}>Upcoming Champaigns</li>\r\n                <li onClick={() => handleClick(\"live\")} className={`${active === 'live' ? 'active' : ''}`} >Live Champaigns</li>\r\n                <li onClick={() => handleClick(\"past\")} className={`${active === 'past' ? 'active' : ''}`}>Past Champaigns </li>\r\n            </ul>\r\n        </nav>\r\n\r\n    )\r\n};\r\n\r\nexport default NavBar;","export const campaignsData = {\r\n    \r\n        \"data\": [{\r\n            \"name\": \"Test Whatsapp\",\r\n            \"region\": \"US\",\r\n            \"createdOn\": 1576916999947,\r\n            \"price\": \"100 $\",\r\n            \"csv\": \"Some CSV link for Whatsapp\",\r\n            \"report\": \"Some report link for Whatsapp\",\r\n            \"image_url\":\"Some image url of the campaign\" \r\n          },\r\n          {\r\n            \"name\": \"Super Jewels Quest\",\r\n            \"region\": \"CA, FR\",\r\n            \"createdOn\": 1576916999947,\r\n            \"price\": \"100 $\",\r\n            \"csv\": \"Some CSV link for Super Jewels Quest\",\r\n            \"report\": \"Some report link for Super Jewels Ques\",\r\n            \"image_url\":\"Some image url of the campaign\"\r\n          },\r\n          {\r\n            \"name\": \"Mole Slayer\",\r\n            \"region\": \"FR\",\r\n            \"createdOn\": 1559806711124,\r\n            \"price\": \"100 $\",\r\n            \"csv\": \"Some CSV link for Mole Slayer\",\r\n            \"report\": \"Some report link for Mole Slayer\",\r\n            \"image_url\":\"Some image url of the campaign\"\r\n          },\r\n          {\r\n            \"name\": \"Mancala Mix\",\r\n            \"region\": \"JP\",\r\n            \"createdOn\": 1559806680124,\r\n            \"price\": \"100 $\",\r\n            \"csv\": \"Some CSV link for Mancala Mix\",\r\n            \"report\": \"Some report link for Mancala Mix\",\r\n            \"image_url\":\"Some image url of the campaign\"\r\n          }\r\n        ]\r\n      }\r\n","import React from 'react';\r\n   /**\r\n   * \r\n   *@discription - This function will return the jsx of model popup\r\n   @param campaignInfo -Object of campaign selected\r\n    @param handleClose -function to close popup\r\n     @param show -variable to show and hide popup\r\n     @return {String} - returns the jsx code of the popup\r\n   */\r\nexport const Popup = ({ campaignInfo, handleClose, show }) => {\r\n    let showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\r\n    return (\r\n        <div className={showHideClassName}>\r\n            <section className=\"modal-main\">\r\n              <header className = \"model-header\">\r\n                <img  src = \"../images/Bitmap.png\" alt= \"pubG\" />\r\n                <h2>PUBG MOBILE</h2>\r\n              </header>\r\n                <div className=\"campaign-info\">\r\n                 <h1>Pricing</h1>\r\n                 <span>1 month </span>\r\n                 <span>{campaignInfo && campaignInfo.price}</span>\r\n                </div>\r\n                <button className=\"button-close\" onClick={handleClose}>close</button>\r\n            </section>\r\n        </div>\r\n    );\r\n};","import React, {useState} from 'react';\r\nimport {Popup} from './Popup'\r\nexport const ChampaignResult = ({ campaigns }) => {\r\n    const [show, setModel] = useState(false);\r\n    const [campaignInfo, setcampaignInfo] = useState(null);\r\n    /**\r\n    * \r\n    *@discription - This function will show model on cliking the row of the table\r\n    @param campaign -Object of campaign selected\r\n    */\r\n   function showModal(campaign) {\r\n    setModel(true)\r\n    setcampaignInfo(campaign)\r\n};\r\n\r\n    return (\r\n        <>\r\n         <Popup show={show} campaignInfo={campaignInfo} handleClose={() => setModel(false)} />\r\n        <div className=\"grid\">\r\n             <div className=\"header\">\r\n                <span className=\"search-head\"><strong>Date</strong></span>\r\n                <span className=\"search-head\"><strong>Campaigns</strong></span>\r\n                <span className=\"search-head\"><strong>VIEW</strong></span>\r\n                <span className=\"search-head\"><strong>ACTION</strong></span>\r\n            </div>\r\n            {campaigns && campaigns.map((item, index) => {\r\n                let current = Date.now()\r\n                let CretedOn = new Date(item.createdOn)\r\n                let dayleft = item.createdOn-current,\r\n                Difference_In_Time = dayleft / (1000 * 3600 * 24)\r\n\r\n                return (\r\n                    <div className = \"grid-container\" key={index}>\r\n                        <span >{CretedOn.toString() } <span>{parseInt(Difference_In_Time)} days left</span></span>\r\n                        <span>{item.name}</span>\r\n                        <span onClick ={() => showModal(item)}>View Pricing</span>\r\n                        <span>CSV</span>\r\n                        <span>Report</span>\r\n                        <span>Schedule Again</span>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    </>\r\n    )\r\n}","import React from 'react'\r\nimport NavBar from './NavBar'\r\nimport { connect } from 'react-redux';\r\nimport { getCampaigns } from '../actions/action'\r\nimport { ChampaignResult } from './ChampaignResult';\r\nclass Campaigns extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n    * \r\n    *@discription - This function will set the initial upcoming campaign\r\n    */\r\n    componentDidMount() {\r\n        this.props.getCampaigns(\"upcoming\")\r\n    }\r\n    /**\r\n    * \r\n    *@discription - This function will filter the campaign\r\n    @param campaigns - Value of campaign\r\n    */\r\n    filtercampaigns = (campaigns) => {\r\n        this.props.getCampaigns(campaigns)\r\n\r\n    }\r\n\r\n    /**\r\n    * \r\n    *@discription - This function will render the jsx of table and bar\r\n    @param campaigns - Value of campaign\r\n    */\r\n    render() {\r\n        return (\r\n            <>\r\n                <NavBar filtercampaigns={this.filtercampaigns} />\r\n                <ChampaignResult campaigns={this.props.campaigns} />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    campaigns: state.reducer.campaigns\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    getCampaigns: (campaigns) => dispatch(getCampaigns(campaigns)),\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Campaigns)","import {campaignsData} from '../Fixers/campaignsData'\r\nexport const getCampaigns = (campiagns) => dispatch => {\r\n    let currentDate = new Date();\r\n    let Current = currentDate.getTime()\r\n    let newCampaigns  \r\n    if(campiagns == \"upcoming\" || campiagns == \"live\"){\r\n        newCampaigns = campaignsData.data.filter((item)=>{\r\n            return item.createdOn > Current\r\n        })\r\n    }else{\r\n      newCampaigns = campaignsData.data.filter((item)=>{\r\n            return item.createdOn < Current\r\n        })\r\n    }\r\n    dispatch({\r\n     type: 'NEW_CAMPAIGNS',\r\n     payload: newCampaigns\r\n    })\r\n   }\r\n\r\n","import React from 'react';\nimport './css/style.css'\nimport Header from './component/Header'\nimport Campaigns from './component/Campaigns'\nconst App = () => {\n \n  return (\n    <div className = \"container\">\n    <Header />\n    <div className = \"main-container\">\n      <h1 className = \"manage-campaigns\">Manage Campians</h1>\n      <Campaigns />\n    </div>\n  </div>\n  )\n    \n  \n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nimport {campaignsData} from '../Fixers/campaignsData'\r\nconst initialState = {\r\n  campaigns:[]\r\n};\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n     case 'NEW_CAMPAIGNS':\r\n      return {\r\n            ...state, campaigns:action.payload\r\n      }\r\n     default:\r\n      return state\r\n    }\r\n   }","import { combineReducers } from 'redux';\r\nimport reducer from './reducer';\r\nexport default combineReducers({\r\n reducer\r\n});","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/rootReducer';\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(\r\n        applyMiddleware(...middleware)\r\n    )\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\n\nReactDOM.render(<Provider store = {store} ><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}